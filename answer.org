* Понятие тестирования и его виды
** Тестирование — это процесс оценки и проверки программного обеспечения (ПО) с целью выявления ошибок, недочетов и несоответствий требованиям. Основные виды тестирования включают:
*** Функциональное тестирование: проверка функциональности ПО.
*** Регрессивное тестирование: проверка, что изменения в коде не повлияли на существующий функционал.
*** Тестирование производительности: оценка скорости, масштабируемости и стабильности ПО под нагрузкой.
*** Тестирование безопасности - тестирование ПО на наличие уязвимостей.
* Основные встроенные типы данных в современных в языках программирования
** Int
** String
** Float
** Double
** Long
* Понятие отладки и её процессы
** Отладка — это процесс поиска и устранения ошибок в программном обеспечении. Основные этапы отладки включают:
*** Выявление ошибки: определение, где и почему произошел сбой.
*** Анализ: изучение кода и логов для понимания причины ошибки.
*** Исправление: внесение изменений в код для устранения проблемы.
*** Тестирование: проверка, что исправление не вызвало новых ошибок.
* ER- моделирование структуры БД. Компоненты диаграммы ERwin.
** ER - моделирование БД включает в себя
*** Концептуальное проектирование
*** Определение требований к среде
*** Выбор СУБД и других програмных средств
*** Логическое проектирование БД
*** Физическое проектирование БД
** Диаграмма ERwin строится из трех основных блоков - сущностей, атрибутов и связей. 
* Цикл тестирования и его виды. Задачи частного цикла тестирования. Задачи полного цикла тестирования.
** Цикл тестирования — это последовательность этапов, которые проходят в процессе тестирования ПО. Основные виды:
*** Частный цикл тестирования: включает в себя тестирование отдельных компонентов или модулей.
*** Полный цикл тестирования: охватывает все этапы тестирования от планирования до завершения, включая тестирование на всех уровнях.
** Задачи частного цикла тестирования:
*** Проверка функциональности отдельных модулей.
*** Выявление ошибок на ранних стадиях разработки.
** Задачи полного цикла тестирования:
*** Обеспечение качества всего ПО.
*** Подтверждение соответствия требованиям.
* Системы контроля версий. GIT. Основные возможности. Работа с клиентом командной строки
** Система контроля версий GIT была разработана для разработки ядра Linux. Позже, популярность возросла и используется повсеместно.
** Основной возможностью является сохранение кода на удалённый сервер (или репозиторий) (к примеру: github.com) и управление версиями ПО.
** Основные команды:
*** git init: иницилизация репозитория
*** git add: иницилизация файла(ов)
*** git commit: создание коммита
*** git push: отправка изменений на удалённый репозиторий (при push одновременно выполняется merge и fetch)
*** git pull: получение изменений из удалённого репозитория
* Понятие уровня тестирования
** Уровень тестирования — это стадия, на которой проводится тестирование. Основные уровни:
*** Модульное тестирование: тестирование отдельных модулей.
*** Интеграционное тестирование: тестирование взаимодействия между модулями.
*** Системное тестирование: тестирование всей системы в целом.
*** Приемочное тестирование: проверка готовности ПО к эксплуатации.
* Сущность диаграммы UML
** UML включает различные типы диаграмм, такие как:
*** Диаграммы классов: Показывают классы и их взаимосвязи.
*** Диаграммы последовательностей: Отображают взаимодействие объектов во времени.
*** Диаграммы состояний: Моделируют состояния объектов и переходы между ними.
*** Диаграммы компонентов: Отображают структуру системы на уровне компонентов.
* Модульное тестирование
** Модульное тестирование — это процесс тестирования отдельных модулей или компонентов ПО. Цель — выявить ошибки на ранней стадии разработки. Обычно выполняется разработчиками с использованием автоматизированных тестов.
* Язык унифицированного моделирования UML
** UML - это визуальный язык для определения, представления, проектирования и документирования программных систем, организационно-экономических систем, технических систем и других систем различной природы. Включает в себя:
*** Классы: Определяют структуру объектовб их атрибуты и методы
*** Объекты: Конкретные экземпляры классов, имеют состояние и поведение
*** Связи: Отношение между классами. Связь может быть слабой, обычнойи сильной.
* Интеграционное тестирование
** Интеграционное тестирование — это процесс тестирования взаимодействия между модулями или компонентами системы. Цель — выявить ошибки, возникающие при взаимодействии различных частей системы.
* Функциональный метод IDEF3
** способ описания процессов с использованием структурированного метода, позволяющего эксперту в предметной области представить положение вещей как упорядоченную последовательность событий с одновременным описанием объектов, имеющих непосредственное отношение к процессу.
* Системное тестирование
** Системное тестирование — это процесс тестирования всей системы в целом, чтобы убедиться, что она соответствует заданным требованиям. Включает функциональное и нефункциональное тестирование.
* Функциональное моделирование бизнес-процессов с использованием стандарта IDEFO
** Целью методики является построение функциональной схемы исследуемой системы, описывающей все необходимые процессы с точностью, достаточной для однозначного моделирования деятельности системы.
* Выходное тестирование. Приёмочное тестирование
** Выходное тестирование - это тестирование, провоидимое тестировщиками перед сдачей заказчику.
** Приемочное тестирование — это тестирование, проводимое заказчиком или конечными пользователями для подтверждения, что система соответствует их требованиям и готова к эксплуатации.
* Case - технологии
** Case средства - к ним относят любые средства, которые автоматизируют ту или иную совокупность процессов жизненного цикла ПО и обладающее следующими характерными особенностями:
*** Мощные графические средства для описания документирования ИС.
*** Интеграция отдельных компонентов.
*** Использование репозитория
* Требования к ПО и его реализация. Техника отслеживания хода выполнения программных проектов
** Требование к ПО определяются на стадии написания ТЗ. В нём прописываются основные требования которые должно соблюдать будущее ПО.
* Обработка исключений (Exceptions) в Android.
** Обрабатывать исключения можно  с помощью try-catch.
* Тетрадь событий проекта. Отчеты.
** Тетрадь событий проекта — это документ, в котором фиксируются все важные события, изменения и решения, принятые в ходе проекта.
** Отчеты — это документы, которые содержат информацию о ходе выполнения проекта, достигнутых результатах и выявленных проблемах.
* Тестирование программы как «черного ящика». Тестирование программ методами «белого ящика»
** Тестирование как «черного ящика» — это метод, при котором тестировщик не знает внутренней структуры программы и тестирует ее только на основе входных данных и ожидаемых выходных.
** Тестирование методами «белого ящика» — это метод, при котором тестировщик имеет доступ к внутреннему коду и структуре программы, что позволяет ему разрабатывать тесты на основе логики и алгоритмов.
* Жизненный цикл Activity
** Создание (onCreate)
** Запуск (onStart) 
** Возобновление (onResume)
** Приостановка (onPause)
** Остановка (onStop)
** Уничтожение (onDestroy)
* Эффективность программного обеспечения
** Эффективность программного обеспечения — это способность ПО выполнять свои функции с минимальными затратами ресурсов (времени, памяти, вычислительной мощности). Эффективность можно оценивать по различным критериям, таким как производительность, надежность и удобство использования.
* Структура Android проекта
** В главном каталоге хранятся файлы конфигурации. 
** gradle - директория содержащая файлы и настройки сборщика gradle
** build - директория в которой хранятся скомпилированные файлы
** app - Основной проект (код, изображения и пр.)
* Оптимизация программ
** Оптимизация программ — это процесс улучшения производительности и эффективности программного обеспечения. Это может включать:
*** Улучшение алгоритмов (рефакторинг).
*** Устранение избыточного кода.
*** Использование более оптимизированных библиотек.
* Интерфейсы. Абстрактные классы
** В интерфейсах записываются методы которые должны быть в классах (которые используют данные интерфейс)
** Абстрактные классы отличаются от интерфейсом тем, что могут содержать как и абстрактные методы, так и обычные методы. В классах, которые наследуются от абстрактного класса должны иметь все методы которые являются абстрактными.
* Аттестация программного обеспечения
** Аттестация программного обеспечения — это процесс оценки и проверки ПО на соответствие установленным требованиям и стандартам. Это может включать в себя тестирование, верификацию и аудит.
* Назначение и содержание ТЗ.
** ТЗ - это сходный документ для проектирования и разработки информационной системы, который содержит основные технические требования.
* Методы отладки программного обеспечения
** Трассировка: отслеживание выполнения программы для выявления ошибок.
** Логирование: запись информации о работе программы.
** Использование отладчиков: пошаговое выполнение кода и анализа состояния переменных.
* Основные понятия ООП. Инкапсуляция
** Инкапсуляция - позволяет скрывать внутренние детали реализации (методы) и предоставлять доступ только через определённые интерфейсы
* Адаптация программного обеспечения
** Адаптация программного обеспечения — это процесс изменения ПО для соответствия новым требованиям или условиям эксплуатации. Это может включать обновление функциональности, изменение интерфейса или интеграцию с другими системами.
* Методы проведения обследования
** Силами специалистов
*** Документальная инвенатризация
*** Самофотография рабочего дня
*** Ведение индивидуальных тетрадей и черновиков
** Силами испольнителей
*** Метод анализа операций
*** Личное наблюдение
*** Хронометраж
*** Беседы и консультации с руководителями
*** Опрос исполнителей на рабочих местах
*** Метод аналогий
*** Анализ предоставленного материала
*** Расчётный метод
* Понятие верификации и контроля качества ПП
** Верификация — это процесс проверки, соответствует ли продукт заданным требованиям и спецификациям.
** Контроль качества программного обеспечения включает в себя все мероприятия, направленные на обеспечение соответствия ПО установленным стандартам и требованиям, включая тестирование, прохождение испытаний.
* Каноническое проектирование ИС
** Каноническое проектирование отражает особенности ручной технологии индивидуального проектирования  осуществляемого на уровне испольнителей без использования каких-либо инструментальных средств, позволяющих интегрировать выполенение элементарных операций. Как правило, применяется только для небольших локальных ИС.
** Этапы канонического проектирования:
*** Исследование и обоснование создания системы
*** Разработка ТЗ
*** Создание экскизного проекта
*** Техническое проектирование
*** Рабочее проектирование
*** Ввод в действие
*** Функционирование, сопровождение, модернизация
* Международные стандарты, касающиеся верификации ПО
**    ISO/IEC 25010: стандарт, описывающий качество программного обеспечения и его характеристик.
**    ISO/IEC 12207: стандарт, касающийся процессов жизненного цикла программного обеспечения, включая верификацию и валидацию.
**    IEEE 1012: стандарт, описывающий процессы верификации и валидации программного обеспечения.
* Основные понятия ООП. Полиморфизм.
** Полиморфизм - позволяет перезаписывать детали реализации при наследовании, а так же создание нескольких объектов с разными параметрами.
* Основные понятие ООП. Наследование.
** Наследование - позволяет получать детали реализации от другого класса (От которого получает реализации будет родительским, а тот который получает - дочерним)
* Необходимость принятия мер по защите ПП и БД. Цели защиты ПО. Способы защиты ПП и БД. Программные системы защиты
** Необходимость защиты ПО и БД обусловлена рисками утечки данных, несанкционированного доступа и потери информации.
** Способы защиты:
*** Шифрование данных.
*** Аутентификация и авторизация пользователей.
*** Регулярные обновления ПО.
*** Антивирусные программы.
* Модели жизненного цикла ИС
** Каскадная модель (однократный проход) - подразумевает линейную последовательность выполнения стадий создания информационной системы. Другими словами, переход с одной стадии на следующую происходит только после того, как будет полностью завершена работа на текущей.
*** Достоинства
**** На каждой стадии формируется законченный набор документации, программного и аппаратного обеспечения, отвечающий критериям полноты и согласованности;
**** Выполняемые в четкой последовательности стадии позволяют уверенно планировать сроки выполнения работ и соответствующие ресурсы (денежные, материальные и людские).
*** Недостатки
**** Реальный процесс разработки информационной системы редко полностью укладывается в такую жесткую схему. 
**** Основана на точной формулировке исходных требований к информационной системе. Реально в начале проекта требования заказчика определены лишь частично;
**** Основной недостаток – результаты разработки доступны заказчику только в конце проекта. В случае неточного изложения требований или их изменения в течение длительного периода создания ИС заказчик получает систему, не удовлетворяющую его потребностям.
** Итерационная модель - подразумевает разработку информационной системы с линейной последовательностью стадий, но в несколько инкрементов (версий), т. е. с запланированным улучшением продукта. В начале работы определяются все основные требования к ИС, после чего выполняется её разработка в виде последовательности версий. При этом каждая версия является законченным и работоспособным продуктом.
*** Достоинства и недостатки почти те же что и у каскадной. Но есть один плюс - заказчик может раньше увидеть результат, соотвественно внести какие-то изменения.
** Спиральная модель - Данная модель жизненного цикла характерна при разработке новаторских (нетиповых) систем. В начале работы над проектом у заказчика и разработчика нет четкого видения итогового продукта (требования не могут быть четко определены) или стопроцентной уверенности в успешной реализации проекта (риски очень велики). В связи с этим принимается решение разработки системы по частям с возможностью изменения требований или отказа от ее дальнейшего развития.
*** Достоинства
**** Позволяет быстрее показать пользователям системы работоспособный продукт, тем самым, активизируя процесс уточнения и дополнения требований;
**** Допускает изменение требований при разработке информационной системы, что характерно для большинства разработок, в том числе и типовых;
**** Обеспечивает большую гибкость в управлении проектом;
**** Позволяет получить более надежную и устойчивую систему. По мере развития системы ошибки и слабые места обнаруживаются и исправляются на каждой итерации;
**** Позволяет совершенствовать процесс разработки – анализ, проводимый в каждой итерации, позволяет проводить оценку того, что должно быть изменено в организации разработки, и улучшить ее на следующей итерации;
**** Уменьшаются риски заказчика. Заказчик может с минимальными для себя финансовыми потерями завершить развитие неперспективного проекта.
*** Недостатки
**** Увеличивается неопределенность у разработчика в перспективах развития проекта. Этот недостаток вытекает из предыдущего достоинства модели;
**** Затруднены операции временного и ресурсного планирования всего проекта в целом. Для решения этой проблемы необходимо ввести временные ограничения на каждую из стадий жизненного цикла. Переход осуществляется в соответствии с планом, даже если не вся запланированная работа выполнена. План составляется на основе статистических данных, полученных в предыдущих проектах и личного опыта разработчиков.
* Категории прав и правовые методы защиты ПП и БД
** Категории прав на программное обеспечение и базы данных включают:
*** Авторские права: защищают оригинальные произведения, включая код и документацию.
*** Патенты: могут защищать уникальные алгоритмы и технологии.
*** Торговые марки: защищают названия и логотипы.
** Правовые методы защиты включают:
*** Лицензирование программного обеспечения.
*** Регистрация авторских прав.
*** Патентование изобретений.
* Жизненный цикл ИС
** Жизненный цикл информационной системы – период времени, который начинается с момента принятия решения о необходимости создания информационной системы и заканчивается в момент ее полного изъятия из эксплуатации.
** Стадии:
*** Планирование и анализ требований - исследование и анализ существующей информационной системы, определение требований к создаваемой ИС, оформление технико-экономического обоснования и технического задания на разработку ИС.
*** Проектирование - Разработка в соответствии со сформулированными требованиями состава автоматизируемых функций (функциональная архитектура) и состава обеспечивающих подсистем (системная архитектура), оформление технического проекта ИС.
*** Реализация - Разработка и настройка программ, наполнение баз данных, создание рабочих инструкций для персонала, оформление рабочего проекта.
*** Внедрение - Комплексная отладка подсистем ИС, обучение персонала, поэтапное внедрение ИС в эксплуатацию по подразделениям объекта, оформление акта о приемо-сдаточных испытаниях ИС.
** Основные процессы дизненного цикла:
*** Приобритение
*** Поставка
*** Разработка
*** Эксплуатация
*** Сопровождение
* Понятие рефакторинга программного кода.
** Рефакторинг — это процесс изменения внутренней структуры кода без изменения его внешнего поведения. Цель рефакторинга — улучшение читаемости, поддерживаемости и производительности кода.
* Классификация средств проектирования ИС (возможно что не верно)
** По уровню абстракции
*** Средства высокого уровня - позволяют проектировать системы на абстрактном уровне, используя графические нотации и модели (UML, ER)
*** Средства низкого уровня - ориентированы на детальное проектирование и реализацию, включая языки программирования и инструменты для разработки.
** По назначению
*** Средства для моделирования - используются для создания моделей ИС, такие как CASE-средства
*** Средства для разработки - включают интегрированные среды разработки (IDE), фреймворки и библиотеки, например, Eclipse, IntelliJ IDEA.
*** Средства для тестирования - применяются для проверки и валидации ИС, такие как инструменты для автоматизированного тестирования (JUnit, Selenium).
** По типу интерфейса
*** Графические средства - Позволяют визуализировать проектируемую систему, например, инструменты для создания диаграмм (Draw.io).
*** Текстовые стредства - используют текстовые форматы для описания систем, такие как языки описания моделей (например, BPMN).
** По способу использования
*** Коммерческие средства - ПО доступное на коммерческой основе
*** Открытые средства - бесплатное или с открытым исходным кодом
* Типы лицензий на программные продукты. Авторское право.
** Лицензии:
*** Коммерческие лицензии: предоставляют право на использование ПО за плату.
*** Открытые лицензии: позволяют пользователям изменять и распространять ПО (например, GPL, MIT).
*** Бесплатные лицензии: предоставляют право на использование без оплаты, но с ограничениями.
** Авторское право защищает оригинальные произведения, включая программный код, и предоставляет правообладателю исключительные права на использование и распространение.
* Классификация методов проектирования ИС
** По степени автоматизации
*** Ручное - при котором проектирование компонентов ИС осуществляется без использования специальных программных средств, а программрование - на алгоритмических языках.
*** Компьютерное(автоматическое) - производится генерация или конфигурирование (настройка) проектных решений на основе использования специальыъ инструментальных программных средств.
** По степени использования типовых решений
*** Индивидуальное - когда проектные решения разрабатываются "с нуля" в соотвествии с требованиями к АИС.
*** Типовое - предполагающее конфигурирование ИС из готовых типовых проектных решений (программных модулей).
** По степени адаптивности
*** Реконструкции - когда адаптация проектных решений выполняется путём переработки соотвествующих компонентов (перепрограммирование программных модулей)
*** Параметризации - когда проектные решения настраиваются (генерируются) в соотвествии с изменяемыми параметрами.
*** Реконструкция модели - когда изменяется модель проблемной области, на основе которой автоматически заново генерируются проектные решения.
* UI тестирование
** UI тестирование (тестирование пользовательского интерфейса) — это процесс проверки интерфейса приложения на соответствие требованиям и удобство использования. Это включает в себя проверку элементов интерфейса, таких как кнопки, меню и форм.ы
* Области применения языка Java. Объявление класса. Стандартная библиотека классов.
** Java используется в:
*** Веб-разработка
*** Мобильные приложения
*** Корпоративные решения
*** Встраиваемые системы
** Класс в Java определяется с помощью зарезервированного слова "class"
** Стандартные библиотеки классов:
*** java.lang (String, Math, System)
*** java.util - различные утилиты (к примеру: коллекции (ArrayList))
*** java.io - Классы для ввода и вывода, а так же для работы с файлами и потоками
*** java.net - Классы для работы с сетевыми приложениями, включая сокеты и URL
* UX тестирование
** UX тестирование (тестирование пользовательского опыта) — это процесс оценки взаимодействия пользователя с продуктом. Цель — выявить проблемы в удобстве использования и удовлетворенности пользователей. Это может включать в себя тестирование прототипов, опрос
* Мобильное программирование, платформы для разработки. Виды мобильных приложений и их архитектура.
** Мобильная разработка введётся в основном на языке Java и Kotlin. Для этих языков есть среда разработки Android Studio.
** Виды мобильных приложений:
*** Нативные приложения - разрабатываются для конкретной платформы с использованием языком специфичных для данных платформ
*** Кроссплатформенные приложения - могут работать на нескольких платформах с использованием одного и того же кода.
*** Гибридные приложения - Сочетают элементы веб-приложений и нативных приложений. Они разрабатываются с помощью веб-технологий  и оборачиваются в нативный контейнер (инструменты к примеру: Apache Cordova, Lonic)
* Практическая часть
** DONE https://www.figma.com/design/iXEXSu2LcX33UweLef5moD/task1?node-id=0-1&p=f
** DONE https://www.figma.com/design/25ZTAF4iKQE0bz4RTzxzb3/Mood-Music-player-App--Community-?node-id=1-1549
** DONE https://www.figma.com/design/ItHEGa2SQ2LjDxM9WkPe3H/task2?node-id=0-1&p=f
** TODO https://www.figma.com/design/OrH4t5waUwm4UuURX2nmUK/Medic--Copy-?node-id=0-1&p=f
** TODO https://www.figma.com/design/tzFoXYZgMLcQ7uZPC7m6S4/Task?node-id=0-1&p=f
** TODO https://www.figma.com/design/3hIQs2iCCV7s7wOt0Pkpph/Yoga-Fitness-App-ui-Design?node-id=0-1&p=f
** TODO https://www.figma.com/design/K2fpQu6Kmt8M6V7xSsMAY4/Medical-Clinik-App?node-id=1-2&p=f
** TODO https://www.figma.com/design/F1G1jlKI1gLUPlFWWq82Mm/Podcast-App?node-id=0-1&p=f
** TODO https://www.figma.com/design/lQz0klolptMQLNfF0CjufY/%D0%A0%D0%A7-1-%D0%A1%D0%B5%D1%81%D1%81%D0%B8%D1%8F--Copy-
** TODO https://www.figma.com/design/9KjiCyDm113uiQrZ5U8hrI/NearBy---Free-Symu.co?node-id=0-1&p=f
** TODO https://www.figma.com/design/YPtmlD4j5fNY1LhhMcAecP/DailyFit---Free-Symu?node-id=161-1274&p=f
